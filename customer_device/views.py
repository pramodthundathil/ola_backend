# views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.shortcuts import get_object_or_404
from django.utils import timezone
from django.db.models import Q
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
import logging

from .models import DeviceEnrollmentCustomer
from .serializers import (
    DeviceEnrollmentCreateSerializer,
    DeviceEnrollmentSerializer,
    DeviceEnrollmentUpdateSerializer,
    DeviceLockSerializer
)
from .knox_service import KNOXService
from .nuovopay_service import NuovoPayService
from finance.models import FinancePlan
from customer.models import Customer
from home.permissions import  IsAdminUser, IsGlobalManager
from customer.permissions import  IsAuthenticatedUser

logger = logging.getLogger(__name__)


# --------------------------------------------------------
# Device Enrollment API View
# --------------------------------------------------------
class DeviceEnrollmentAPIView(APIView):
    """
    Device Enrollment Management
    - POST: Create enrollment and initiate device enrollment
    - GET: Retrieve enrollments (with role-based filtering)
    - PATCH: Update enrollment status
    """
    
    def get_permissions(self):
        """
        Global Admin and Admin can see all enrollments
        Other users can only see their own store's enrollments
        """
        if self.request.method == 'GET':
            return [IsAuthenticatedUser()]
        return [IsAuthenticatedUser()]
    
    @swagger_auto_schema(
        operation_summary="Create Device Enrollment",
        operation_description="""
        Create a new device enrollment and automatically initiate enrollment with Samsung KNOX or NuovoPay.
        
        **Auto-populated fields:**
        - `customer`: From finance_plan.credit_application.customer
        - `device_model`: From finance_plan.device
        - `device_brand_name`: From finance_plan.device.brand.name
        - `locking_system`: Auto-determined (KNOX for Samsung, NUOVOPAY for others)
        - `enrollment_qr_code`: Generated by KNOX/NuovoPay
        - `enrollment_link`: Generated by KNOX/NuovoPay
        
        **Required fields:**
        - `finance_plan_id`: Finance Plan ID
        - `imei`: Device IMEI number (must be unique)
        """,
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["finance_plan_id", "imei"],
            properties={
                "finance_plan_id": openapi.Schema(
                    type=openapi.TYPE_INTEGER, 
                    description="Finance Plan ID"
                ),
                "imei": openapi.Schema(
                    type=openapi.TYPE_STRING, 
                    description="Device IMEI number (15 digits)"
                ),
            },
            example={
                "finance_plan_id": 1,
                "imei": "123456789012345"
            }
        ),
        responses={
            201: DeviceEnrollmentSerializer(),
            400: "Validation Error",
            404: "Finance Plan not found",
            500: "Internal Server Error"
        },
        tags=["Device Enrollment"]
    )
    def post(self, request):
        try:
            # Validate input
            serializer = DeviceEnrollmentCreateSerializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            data = serializer.validated_data
            
            # Get finance plan
            finance_plan = get_object_or_404(FinancePlan, id=data['finance_plan_id'])
            
            # Validate device exists in finance plan
            if not finance_plan.device:
                return Response(
                    {"error": "Finance plan does not have a device associated"},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Get customer from finance plan
            customer = finance_plan.credit_application.customer
            
            # Get device details
            device_model = finance_plan.device
            device_brand_name = device_model.brand.name
            
            # Create device enrollment
            enrollment = DeviceEnrollmentCustomer.objects.create(
                customer=customer,
                finance_plan=finance_plan,
                imei=data['imei'],
                device_brand_name=device_brand_name,
                device_model=device_model,
                enrollment_status='NOT_STARTED'
            )
            
            # Auto-determine locking system (done in save() method)
            enrollment.refresh_from_db()
            
            # Initiate enrollment with appropriate service
            enrollment_result = self._initiate_enrollment(enrollment, customer)
            
            if enrollment_result['success']:
                enrollment.enrollment_status = 'QR_GENERATED'
                enrollment.enrollment_qr_code = enrollment_result.get('qr_code', '')
                enrollment.enrollment_link = enrollment_result.get('enrollment_link', '')
                enrollment.locking_system_id = enrollment_result.get('enrollment_id', '')
                enrollment.save()
                
                logger.info(
                    f"[DeviceEnrollment] Created and initiated enrollment for IMEI {data['imei']}, "
                    f"Finance Plan {finance_plan.id}, Locking System: {enrollment.locking_system}"
                )
            else:
                enrollment.enrollment_status = 'FAILED'
                enrollment.enrollment_failed_reason = enrollment_result.get('error', 'Unknown error')
                enrollment.save()
                
                logger.error(
                    f"[DeviceEnrollment] Enrollment initiation failed for IMEI {data['imei']}: "
                    f"{enrollment_result.get('error')}"
                )
            
            # Serialize and return
            response_serializer = DeviceEnrollmentSerializer(enrollment)
            return Response(response_serializer.data, status=status.HTTP_201_CREATED)
            
        except FinancePlan.DoesNotExist:
            logger.error(f"[DeviceEnrollment] Finance Plan not found: {data.get('finance_plan_id')}")
            return Response(
                {"error": "Finance plan not found"}, 
                status=status.HTTP_404_NOT_FOUND
            )
        except Exception as e:
            logger.exception("[DeviceEnrollment] Error creating device enrollment")
            return Response(
                {"error": str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def _initiate_enrollment(self, enrollment, customer):
        """
        Initiate enrollment with KNOX or NuovoPay based on device brand
        
        Returns:
            dict: {'success': bool, 'enrollment_id': str, 'qr_code': str, 'enrollment_link': str, 'error': str}
        """
        try:
            device_model_name = enrollment.device_model.get_full_name()
            
            if enrollment.locking_system == 'KNOX':
                # Samsung KNOX enrollment
                knox_service = KNOXService()
                result = knox_service.enroll_device(
                    imei=enrollment.imei,
                    device_model=device_model_name,
                    customer_email=customer.email if hasattr(customer, 'email') else None
                )
                return result
                
            elif enrollment.locking_system == 'NUOVOPAY':
                # NuovoPay enrollment
                nuovopay_service = NuovoPayService()
                result = nuovopay_service.enroll_device(
                    imei=enrollment.imei,
                    device_model=device_model_name,
                    customer_phone=customer.phone_number if hasattr(customer, 'phone_number') else None
                )
                return result
                
            else:
                return {
                    'success': False,
                    'error': 'No locking system configured for this device'
                }
                
        except Exception as e:
            logger.exception(f"[DeviceEnrollment] Error initiating enrollment: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    @swagger_auto_schema(
        operation_summary="Get Device Enrollment(s)",
        operation_description="""
        Retrieve device enrollment records with role-based access control.
        
        **Permissions:**
        - **Global Admin & Admin**: Can see all enrollments across all stores
        - **Store Manager & Salesperson**: Can only see enrollments from their store
        
        **Query Parameters:**
        - `id` (optional): Get specific enrollment by ID
        - `customer_id` (optional): Get enrollments for a customer
        - `finance_plan_id` (optional): Get enrollment for a finance plan
        - `imei` (optional): Get enrollment by IMEI
        - `enrollment_status` (optional): Filter by status (NOT_STARTED, QR_GENERATED, IN_PROGRESS, COMPLETED, FAILED)
        - `locking_system` (optional): Filter by locking system (KNOX, NUOVOPAY, NONE)
        - `is_locked` (optional): Filter by lock status (true/false)
        
        **Examples:**
        - `GET /api/device-enrollment/` → Get all accessible enrollments
        - `GET /api/device-enrollment/?id=5` → Get enrollment by ID
        - `GET /api/device-enrollment/?customer_id=10` → Get customer enrollments
        - `GET /api/device-enrollment/?enrollment_status=COMPLETED` → Get completed enrollments
        """,
        manual_parameters=[
            openapi.Parameter('id', openapi.IN_QUERY, description="Enrollment ID", type=openapi.TYPE_INTEGER),
            openapi.Parameter('customer_id', openapi.IN_QUERY, description="Customer ID", type=openapi.TYPE_INTEGER),
            openapi.Parameter('finance_plan_id', openapi.IN_QUERY, description="Finance Plan ID", type=openapi.TYPE_INTEGER),
            openapi.Parameter('imei', openapi.IN_QUERY, description="Device IMEI", type=openapi.TYPE_STRING),
            openapi.Parameter('enrollment_status', openapi.IN_QUERY, description="Enrollment Status", type=openapi.TYPE_STRING),
            openapi.Parameter('locking_system', openapi.IN_QUERY, description="Locking System", type=openapi.TYPE_STRING),
            openapi.Parameter('is_locked', openapi.IN_QUERY, description="Is Locked (true/false)", type=openapi.TYPE_BOOLEAN),
        ],
        responses={
            200: DeviceEnrollmentSerializer(many=True),
            404: "Not found"
        },
        tags=["Device Enrollment"]
    )
    def get(self, request):
        try:
            # Get query parameters
            enrollment_id = request.query_params.get('id')
            customer_id = request.query_params.get('customer_id')
            finance_plan_id = request.query_params.get('finance_plan_id')
            imei = request.query_params.get('imei')
            enrollment_status = request.query_params.get('enrollment_status')
            locking_system = request.query_params.get('locking_system')
            is_locked = request.query_params.get('is_locked')
            
            # Base queryset with role-based filtering
            queryset = self._get_base_queryset(request.user)
            
            # Get by ID
            if enrollment_id:
                enrollment = get_object_or_404(queryset, id=enrollment_id)
                serializer = DeviceEnrollmentSerializer(enrollment)
                logger.info(f"[DeviceEnrollment] Retrieved enrollment ID={enrollment_id}")
                return Response(serializer.data, status=status.HTTP_200_OK)
            
            # Get by IMEI
            if imei:
                enrollment = get_object_or_404(queryset, imei=imei)
                serializer = DeviceEnrollmentSerializer(enrollment)
                logger.info(f"[DeviceEnrollment] Retrieved enrollment by IMEI={imei}")
                return Response(serializer.data, status=status.HTTP_200_OK)
            
            # Get by Finance Plan
            if finance_plan_id:
                enrollment = get_object_or_404(queryset, finance_plan_id=finance_plan_id)
                serializer = DeviceEnrollmentSerializer(enrollment)
                logger.info(f"[DeviceEnrollment] Retrieved enrollment for Finance Plan={finance_plan_id}")
                return Response(serializer.data, status=status.HTTP_200_OK)
            
            # Apply filters
            if customer_id:
                queryset = queryset.filter(customer_id=customer_id)
            
            if enrollment_status:
                queryset = queryset.filter(enrollment_status=enrollment_status)
            
            if locking_system:
                queryset = queryset.filter(locking_system=locking_system)
            
            if is_locked is not None:
                is_locked_bool = is_locked.lower() == 'true'
                queryset = queryset.filter(is_locked=is_locked_bool)
            
            # Order by created date
            queryset = queryset.order_by('-created_at')
            
            if not queryset.exists():
                return Response(
                    {"message": "No enrollments found", "data": []},
                    status=status.HTTP_200_OK
                )
            
            serializer = DeviceEnrollmentSerializer(queryset, many=True)
            logger.info(f"[DeviceEnrollment] Retrieved {queryset.count()} enrollments")
            return Response(serializer.data, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.exception("[DeviceEnrollment] Error retrieving enrollments")
            return Response(
                {"error": str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def _get_base_queryset(self, user):
        """
        Get base queryset with role-based filtering
        
        - Global Admin & Admin: See all enrollments
        - Store Manager & Salesperson: See only their store's enrollments
        """
        if user.is_global_manager() or user.is_admin_user():
            # Global Admin and Admin can see all enrollments
            return DeviceEnrollmentCustomer.objects.all()
        
        elif user.is_store_manager() or user.is_salesperson():
            # Store staff can only see enrollments from their store
            if hasattr(user, 'store'):
                return DeviceEnrollmentCustomer.objects.filter(
                    finance_plan__credit_application__store=user.store
                )
            else:
                return DeviceEnrollmentCustomer.objects.none()
        
        else:
            # Default: No access
            return DeviceEnrollmentCustomer.objects.none()
    
    @swagger_auto_schema(
        operation_summary="Update Device Enrollment",
        operation_description="""
        Update enrollment status and details.
        
        **Common use cases:**
        - Update enrollment status (QR_GENERATED, IN_PROGRESS, COMPLETED, FAILED)
        - Mark IMEI as verified
        - Update device internet status
        """,
        request_body=DeviceEnrollmentUpdateSerializer(),
        responses={
            200: DeviceEnrollmentSerializer(),
            400: "Validation Error",
            404: "Enrollment not found"
        },
        tags=["Device Enrollment"]
    )
    def patch(self, request, id):
        try:
            enrollment = get_object_or_404(DeviceEnrollmentCustomer, id=id)
            
            serializer = DeviceEnrollmentUpdateSerializer(
                enrollment, 
                data=request.data, 
                partial=True
            )
            serializer.is_valid(raise_exception=True)
            
            # Handle status-specific logic
            if 'enrollment_status' in request.data:
                new_status = request.data['enrollment_status']
                
                if new_status == 'COMPLETED':
                    enrollment.enrollment_completed_at = timezone.now()
                
                if new_status == 'FAILED' and 'enrollment_failed_reason' not in request.data:
                    return Response(
                        {"error": "enrollment_failed_reason is required when status is FAILED"},
                        status=status.HTTP_400_BAD_REQUEST
                    )
            
            serializer.save()
            
            logger.info(f"[DeviceEnrollment] Updated enrollment ID={id}")
            
            response_serializer = DeviceEnrollmentSerializer(enrollment)
            return Response(response_serializer.data, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.exception(f"[DeviceEnrollment] Error updating enrollment ID={id}")
            return Response(
                {"error": str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# --------------------------------------------------------
# Device Lock/Unlock API View
# --------------------------------------------------------
class DeviceLockAPIView(APIView):
    """
    Device Lock/Unlock Management
    Only Admin and Global Manager can lock/unlock devices
    """
    permission_classes = [IsAdminUser | IsGlobalManager]
    
    @swagger_auto_schema(
        operation_summary="Lock Device",
        operation_description="""
        Lock a device using Samsung KNOX or NuovoPay.
        
        **Permissions:** Admin and Global Manager only
        
        **Required:**
        - `enrollment_id`: Device enrollment ID
        """,
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["enrollment_id"],
            properties={
                "enrollment_id": openapi.Schema(
                    type=openapi.TYPE_INTEGER, 
                    description="Device Enrollment ID"
                ),
            }
        ),
        responses={
            200: "Device locked successfully",
            400: "Validation Error",
            403: "Permission denied",
            404: "Enrollment not found"
        },
        tags=["Device Lock/Unlock"]
    )
    def post(self, request):
        try:
            enrollment_id = request.data.get('enrollment_id')
            
            if not enrollment_id:
                return Response(
                    {"error": "enrollment_id is required"},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            enrollment = get_object_or_404(DeviceEnrollmentCustomer, id=enrollment_id)
            
            # Check if already locked
            if enrollment.is_locked:
                return Response(
                    {"message": "Device is already locked"},
                    status=status.HTTP_200_OK
                )
            
            # Check if enrollment is completed
            if enrollment.enrollment_status != 'COMPLETED':
                return Response(
                    {"error": "Cannot lock device. Enrollment must be completed first."},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Lock device based on locking system
            lock_result = self._lock_device(enrollment)
            
            if lock_result['success']:
                enrollment.is_locked = True
                enrollment.lock_applied_at = timezone.now()
                enrollment.save()
                
                logger.info(
                    f"[DeviceLock] Device locked successfully: IMEI={enrollment.imei}, "
                    f"Locking System={enrollment.locking_system}"
                )
                
                return Response(
                    {
                        "message": "Device locked successfully",
                        "enrollment_id": enrollment.id,
                        "imei": enrollment.imei,
                        "locked_at": enrollment.lock_applied_at
                    },
                    status=status.HTTP_200_OK
                )
            else:
                logger.error(
                    f"[DeviceLock] Failed to lock device: IMEI={enrollment.imei}, "
                    f"Error={lock_result.get('error')}"
                )
                return Response(
                    {"error": lock_result.get('error', 'Failed to lock device')},
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR
                )
            
        except Exception as e:
            logger.exception("[DeviceLock] Error locking device")
            return Response(
                {"error": str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @swagger_auto_schema(
        operation_summary="Unlock Device",
        operation_description="""
        Unlock a device using Samsung KNOX or NuovoPay.
        
        **Permissions:** Admin and Global Manager only
        
        **Required:**
        - `enrollment_id`: Device enrollment ID
        """,
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["enrollment_id"],
            properties={
                "enrollment_id": openapi.Schema(
                    type=openapi.TYPE_INTEGER, 
                    description="Device Enrollment ID"
                ),
            }
        ),
        responses={
            200: "Device unlocked successfully",
            400: "Validation Error",
            403: "Permission denied",
            404: "Enrollment not found"
        },
        tags=["Device Lock/Unlock"]
    )
    def delete(self, request):
        try:
            enrollment_id = request.data.get('enrollment_id')
            
            if not enrollment_id:
                return Response(
                    {"error": "enrollment_id is required"},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            enrollment = get_object_or_404(DeviceEnrollmentCustomer, id=enrollment_id)
            
            # Check if already unlocked
            if not enrollment.is_locked:
                return Response(
                    {"message": "Device is already unlocked"},
                    status=status.HTTP_200_OK
                )
            
            # Unlock device based on locking system
            unlock_result = self._unlock_device(enrollment)
            
            if unlock_result['success']:
                enrollment.is_locked = False
                enrollment.lock_applied_at = None
                enrollment.save()
                
                logger.info(
                    f"[DeviceLock] Device unlocked successfully: IMEI={enrollment.imei}, "
                    f"Locking System={enrollment.locking_system}"
                )
                
                return Response(
                    {
                        "message": "Device unlocked successfully",
                        "enrollment_id": enrollment.id,
                        "imei": enrollment.imei
                    },
                    status=status.HTTP_200_OK
                )
            else:
                logger.error(
                    f"[DeviceLock] Failed to unlock device: IMEI={enrollment.imei}, "
                    f"Error={unlock_result.get('error')}"
                )
                return Response(
                    {"error": unlock_result.get('error', 'Failed to unlock device')},
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR
                )
            
        except Exception as e:
            logger.exception("[DeviceLock] Error unlocking device")
            return Response(
                {"error": str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def _lock_device(self, enrollment):
        """Lock device using appropriate service"""
        try:
            if enrollment.locking_system == 'KNOX':
                knox_service = KNOXService()
                return knox_service.lock_device(
                    enrollment_id=enrollment.locking_system_id,
                    imei=enrollment.imei
                )
            elif enrollment.locking_system == 'NUOVOPAY':
                nuovopay_service = NuovoPayService()
                return nuovopay_service.lock_device(
                    enrollment_id=enrollment.locking_system_id,
                    imei=enrollment.imei
                )
            else:
                return {
                    'success': False,
                    'error': 'No locking system configured'
                }
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _unlock_device(self, enrollment):
        """Unlock device using appropriate service"""
        try:
            if enrollment.locking_system == 'KNOX':
                knox_service = KNOXService()
                return knox_service.unlock_device(
                    enrollment_id=enrollment.locking_system_id,
                    imei=enrollment.imei
                )
            elif enrollment.locking_system == 'NUOVOPAY':
                nuovopay_service = NuovoPayService()
                return nuovopay_service.unlock_device(
                    enrollment_id=enrollment.locking_system_id,
                    imei=enrollment.imei
                )
            else:
                return {
                    'success': False,
                    'error': 'No locking system configured'
                }
        except Exception as e:
            return {'success': False, 'error': str(e)}