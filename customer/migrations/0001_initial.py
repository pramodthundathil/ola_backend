# Generated by Django 5.1.4 on 2025-10-15 07:37

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_number', models.CharField(help_text='ID card with hyphens (e.g., 8-123-456) or passport number', max_length=50, unique=True)),
                ('document_type', models.CharField(choices=[('PANAMA_ID', 'Panamanian ID Card'), ('PASSPORT', 'Passport'), ('FOREIGNER_ID', 'Foreigner ID Card')], max_length=20)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('BLOCKED', 'Blocked')], default='ACTIVE', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'customers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CreditScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apc_score', models.IntegerField(blank=True, help_text='Credit bureau score from Experian', null=True)),
                ('apc_score_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('apc_consultation_id', models.CharField(blank=True, help_text='Reference ID from Experian API call', max_length=100, null=True)),
                ('apc_status', models.CharField(choices=[('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PENDING', 'Pending')], default='PENDING', max_length=20)),
                ('internal_score', models.IntegerField(blank=True, help_text='Internal scoring based on payment history with Ola', null=True)),
                ('good_payment_history_points', models.IntegerField(default=0)),
                ('delinquency_penalty_points', models.IntegerField(default=0)),
                ('number_of_previous_loans', models.IntegerField(default=0)),
                ('declared_income', models.DecimalField(blank=True, decimal_places=2, help_text='Income declared by customer', max_digits=10, null=True)),
                ('validated_income', models.DecimalField(blank=True, decimal_places=2, help_text='Income validated through CSS base', max_digits=10, null=True)),
                ('monthly_expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_installment_capacity', models.DecimalField(decimal_places=2, help_text='Maximum monthly installment (30% of income)', max_digits=10)),
                ('payment_capacity_status', models.CharField(choices=[('SUFFICIENT', 'Sufficient'), ('INSUFFICIENT', 'Insufficient')], default='SUFFICIENT', max_length=20)),
                ('final_credit_status', models.CharField(choices=[('PRE_QUALIFIED', 'Pre-Qualified'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PENDING_APPROVAL', 'Pending Approval')], default='PENDING_APPROVAL', max_length=20)),
                ('credit_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum credit amount approved', max_digits=10, null=True)),
                ('score_valid_until', models.DateTimeField(help_text='Score is valid for 30 days from creation')),
                ('is_expired', models.BooleanField(default=False)),
                ('verbal_authorization_given', models.BooleanField(default=False, help_text='Customer gave verbal consent to check APC')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consulted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='credit_scores_consulted', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credit_scores', to='customer.customer')),
            ],
            options={
                'db_table': 'credit_scores',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CreditApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PRE_QUALIFIED', 'Pre-Qualified'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PENDING_APPROVAL', 'Pending Approval'), ('EXPIRED', 'Expired')], default='PENDING_APPROVAL', max_length=20)),
                ('application_date', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='Application expires 2 days after creation')),
                ('pre_qualification_passed', models.BooleanField(default=False)),
                ('pre_qualification_date', models.DateTimeField(blank=True, null=True)),
                ('device_brand', models.CharField(blank=True, max_length=100, null=True)),
                ('device_model', models.CharField(blank=True, max_length=100, null=True)),
                ('device_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('device_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price with 7% tax included', max_digits=10, null=True)),
                ('device_imei', models.CharField(blank=True, help_text='Device IMEI number', max_length=20, null=True, unique=True)),
                ('initial_payment', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('amount_to_finance', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('number_of_installments', models.IntegerField(blank=True, null=True)),
                ('installment_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Rounded amount, no cents', max_digits=10, null=True)),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('interest_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('sales_person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='credit_applications', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credit_applications', to='customer.customer')),
            ],
            options={
                'db_table': 'credit_applications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('CUSTOMER_CREATED', 'Customer Created'), ('CREDIT_SCORE_CHECKED', 'Credit Score Checked'), ('APC_CONSULTED', 'APC Consulted'), ('IDENTITY_VERIFIED', 'Identity Verified'), ('APPLICATION_CREATED', 'Application Created'), ('APPLICATION_APPROVED', 'Application Approved'), ('APPLICATION_REJECTED', 'Application Rejected'), ('DEVICE_ENROLLED', 'Device Enrolled'), ('PAYMENT_RECEIVED', 'Payment Received'), ('DEVICE_LOCKED', 'Device Locked'), ('DEVICE_UNLOCKED', 'Device Unlocked')], max_length=50)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, help_text='Additional data related to the action', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
                ('credit_application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to='customer.creditapplication')),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to='customer.customer')),
            ],
            options={
                'db_table': 'audit_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DecisionEngineResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apc_score_value', models.IntegerField()),
                ('apc_score_passed', models.BooleanField(default=False)),
                ('apc_score_weight', models.IntegerField(default=30)),
                ('internal_score_value', models.IntegerField(blank=True, null=True)),
                ('internal_score_passed', models.BooleanField(default=False)),
                ('internal_score_weight', models.IntegerField(default=20)),
                ('document_valid', models.BooleanField(default=False)),
                ('biometric_valid', models.BooleanField(default=False)),
                ('liveness_check_passed', models.BooleanField(default=False)),
                ('identity_validation_passed', models.BooleanField(default=False)),
                ('identity_validation_weight', models.IntegerField(default=15)),
                ('income_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('installment_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('installment_to_income_ratio', models.DecimalField(decimal_places=2, max_digits=5)),
                ('payment_capacity_passed', models.BooleanField(default=False)),
                ('payment_capacity_weight', models.IntegerField(default=15)),
                ('valid_references_count', models.IntegerField(default=0)),
                ('references_passed', models.BooleanField(default=False)),
                ('references_weight', models.IntegerField(default=10)),
                ('duplicate_id_check', models.BooleanField(default=True)),
                ('duplicate_phone_check', models.BooleanField(default=True)),
                ('duplicate_imei_check', models.BooleanField(default=True)),
                ('anti_fraud_passed', models.BooleanField(default=False)),
                ('anti_fraud_weight', models.IntegerField(default=10)),
                ('anti_fraud_notes', models.TextField(blank=True, null=True)),
                ('initial_payment_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('loan_term_months', models.IntegerField()),
                ('is_high_end_device', models.BooleanField(default=False)),
                ('commercial_conditions_passed', models.BooleanField(default=False)),
                ('commercial_conditions_weight', models.IntegerField(default=10)),
                ('total_score', models.IntegerField(help_text='Weighted total of all factors')),
                ('final_decision', models.CharField(choices=[('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('MANUAL_REVIEW', 'Manual Review Required')], max_length=20)),
                ('rejection_reasons', models.JSONField(blank=True, help_text='List of reasons for rejection', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('credit_application', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='decision_engine_result', to='customer.creditapplication')),
            ],
            options={
                'db_table': 'decision_engine_results',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imei', models.CharField(max_length=20, unique=True)),
                ('device_brand', models.CharField(max_length=100)),
                ('device_model', models.CharField(max_length=100)),
                ('enrollment_status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('QR_GENERATED', 'QR Code Generated'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='NOT_STARTED', max_length=20)),
                ('enrollment_qr_code', models.TextField(blank=True, help_text='QR code for device enrollment', null=True)),
                ('enrollment_link', models.URLField(blank=True, null=True)),
                ('locking_system', models.CharField(choices=[('KNOX', 'Samsung KNOX'), ('NUOVOPAY', 'NuovoPay'), ('NONE', 'None')], default='NONE', max_length=20)),
                ('locking_system_id', models.CharField(blank=True, help_text='Reference ID from KNOX or NuovoPay', max_length=100, null=True)),
                ('is_locked', models.BooleanField(default=False)),
                ('lock_applied_at', models.DateTimeField(blank=True, null=True)),
                ('imei_verified', models.BooleanField(default=False)),
                ('device_has_internet', models.BooleanField(default=False, help_text='Device must have internet to complete enrollment')),
                ('enrollment_completed_at', models.DateTimeField(blank=True, null=True)),
                ('enrollment_failed_reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('credit_application', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='device_enrollment', to='customer.creditapplication')),
            ],
            options={
                'db_table': 'device_enrollments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IdentityVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_front_image', models.ImageField(help_text='Front side of ID/Passport', upload_to='documents/front/')),
                ('document_back_image', models.ImageField(blank=True, help_text='Back side of ID (if applicable)', null=True, upload_to='documents/back/')),
                ('document_uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('biometric_status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('QR_GENERATED', 'QR Code Generated'), ('SMS_SENT', 'SMS Sent'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='NOT_STARTED', max_length=20)),
                ('metamap_verification_id', models.CharField(blank=True, help_text='Reference ID from MetaMap API', max_length=100, null=True)),
                ('selfie_image', models.ImageField(blank=True, null=True, upload_to='biometrics/selfies/')),
                ('liveness_check_passed', models.BooleanField(default=False)),
                ('face_match_score', models.FloatField(blank=True, help_text='Face matching confidence score (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('biometric_verified_at', models.DateTimeField(blank=True, null=True)),
                ('phone_verification_code', models.CharField(blank=True, max_length=6, null=True)),
                ('phone_verified_at', models.DateTimeField(blank=True, null=True)),
                ('email_verification_code', models.CharField(blank=True, max_length=6, null=True)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('verification_qr_code', models.TextField(blank=True, help_text='Base64 encoded QR code image', null=True)),
                ('verification_link', models.URLField(blank=True, help_text='Unique link for customer to complete verification', null=True)),
                ('verification_link_expires_at', models.DateTimeField(blank=True, null=True)),
                ('overall_status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('VERIFIED', 'Verified'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('verification_completed_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='identity_verification', to='customer.customer')),
            ],
            options={
                'db_table': 'identity_verifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(choices=[('PUNTO_PAGO', 'Punto Pago'), ('YAPPY', 'Yappy'), ('WESTERN_UNION', 'Western Union'), ('CASH', 'Cash'), ('OTHER', 'Other')], max_length=20)),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField()),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded')], default='PENDING', max_length=20)),
                ('transaction_reference', models.CharField(blank=True, help_text='External payment reference number', max_length=100, null=True)),
                ('is_initial_payment', models.BooleanField(default=False, help_text='True if this is the initial/down payment')),
                ('installment_number', models.IntegerField(blank=True, help_text='Which installment number this payment covers', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('credit_application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='customer.creditapplication')),
            ],
            options={
                'db_table': 'payment_records',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='PersonalReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('phone_number', models.CharField(max_length=20)),
                ('relationship', models.CharField(help_text='Relationship to customer (e.g., friend, family, colleague)', max_length=100)),
                ('is_valid', models.BooleanField(default=True)),
                ('validation_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personal_references', to='customer.customer')),
            ],
            options={
                'db_table': 'personal_references',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['document_number'], name='customers_documen_ee1f38_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['email'], name='customers_email_92e882_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['phone_number'], name='customers_phone_n_7d2329_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['created_at'], name='customers_created_c63477_idx'),
        ),
        migrations.AddIndex(
            model_name='creditscore',
            index=models.Index(fields=['customer', '-created_at'], name='credit_scor_custome_3b3248_idx'),
        ),
        migrations.AddIndex(
            model_name='creditscore',
            index=models.Index(fields=['score_valid_until'], name='credit_scor_score_v_89cd2d_idx'),
        ),
        migrations.AddIndex(
            model_name='creditscore',
            index=models.Index(fields=['apc_status'], name='credit_scor_apc_sta_3bb176_idx'),
        ),
        migrations.AddIndex(
            model_name='creditapplication',
            index=models.Index(fields=['customer', '-created_at'], name='credit_appl_custome_05ade5_idx'),
        ),
        migrations.AddIndex(
            model_name='creditapplication',
            index=models.Index(fields=['sales_person'], name='credit_appl_sales_p_3838b1_idx'),
        ),
        migrations.AddIndex(
            model_name='creditapplication',
            index=models.Index(fields=['status'], name='credit_appl_status_5f304f_idx'),
        ),
        migrations.AddIndex(
            model_name='creditapplication',
            index=models.Index(fields=['expires_at'], name='credit_appl_expires_fab424_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['customer', '-created_at'], name='audit_logs_custome_b3160f_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', '-created_at'], name='audit_logs_user_id_6193b2_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action_type'], name='audit_logs_action__168beb_idx'),
        ),
        migrations.AddIndex(
            model_name='deviceenrollment',
            index=models.Index(fields=['imei'], name='device_enro_imei_6b39bc_idx'),
        ),
        migrations.AddIndex(
            model_name='deviceenrollment',
            index=models.Index(fields=['enrollment_status'], name='device_enro_enrollm_7224fb_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrecord',
            index=models.Index(fields=['credit_application', '-payment_date'], name='payment_rec_credit__9928a3_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentrecord',
            index=models.Index(fields=['payment_status'], name='payment_rec_payment_152c45_idx'),
        ),
    ]
