from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
import logging

from .models import ProductCategory
from .serializers import ProductCategorySerializer

logger = logging.getLogger(__name__)

class ProductCategoryCreateView(APIView):
    """
    Create a new Product Category.
    Slug is automatically generated by the model.
    """
    permission_classes = [AllowAny]  # Remove or replace with IsAdminOrGlobalManager in production

    @swagger_auto_schema(
        operation_summary="Create a new Product Category",
        operation_description="Creates a new Product Category with optional icon and image",
        request_body=ProductCategorySerializer,  # Use serializer directly
        consumes=['multipart/form-data'],  # Important for file upload
        responses={
            201: ProductCategorySerializer,
            400: "Invalid Category or Category Already Exists.",
            500: "Unexpected Server Error"
        },
        tags=['Product Catalog']
    )
    def post(self, request):
        try:
            serializer = ProductCategorySerializer(data=request.data)
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Category '{serializer.validated_data.get('name')}' created successfully.")
                return Response(serializer.data, status=status.HTTP_201_CREATED)

            logger.warning(f"Category creation failed: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.exception("Unexpected error occurred while creating category.")
            return Response(
                {"detail": "An unexpected error occurred while creating the category."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

