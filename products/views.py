from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from django.shortcuts import get_object_or_404
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
import logging

from .models import ProductCategory
from .serializers import ProductCategorySerializer

logger = logging.getLogger(__name__)

class ProductCategoryCreateView(APIView):
    """
    List all Product Categories and Create a new Product Category.
    Slug is automatically generated by the model.
    """
    permission_classes = [AllowAny]  # Remove or replace with IsAdminOrGlobalManager in production

    @swagger_auto_schema(
        operation_summary="List all Product Categories",
        responses={200: ProductCategorySerializer(many=True)},
        tags=['Product Catalog']
    )
    def get(self, request):
        categories = ProductCategory.objects.all().order_by('display_order', 'name')
        serializer = ProductCategorySerializer(categories, many=True, context={'request': request})
        return Response(serializer.data)
    @swagger_auto_schema(
        operation_summary="Create a new Product Category",
        operation_description="Creates a new Product Category with optional icon and image",
        request_body=ProductCategorySerializer,  # Use serializer directly
        consumes=['multipart/form-data'],  # Important for file upload
        responses={
            201: ProductCategorySerializer,
            400: "Invalid Category or Category Already Exists.",
            500: "Unexpected Server Error"
        },
        tags=['Product Catalog']
    )
    def post(self, request):
        try:
            serializer = ProductCategorySerializer(data=request.data)
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Category '{serializer.validated_data.get('name')}' created successfully.")
                return Response(ProductCategorySerializer(serializer.instance, context={'request': request}).data,status=status.HTTP_201_CREATED
                        )
            logger.warning(f"Category creation failed: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.exception("Unexpected error occurred while creating category.")
            return Response(
                {"detail": "An unexpected error occurred while creating the category."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class ProductCategoryDetailView(APIView):
    """
    Retrieve, Update or Delete a Product Category by ID.
    """
    permission_classes = [AllowAny]

    def get_object(self, pk):
        try:
            return ProductCategory.objects.get(pk=pk)
        except ProductCategory.DoesNotExist:
            logger.warning(f"Category with ID {pk} not found.")
            return None

    @swagger_auto_schema(
        operation_summary="Retrieve Product Category by ID",
        responses={200: ProductCategorySerializer, 404: "Category not found", 500: "Server Error"},
        tags=['Product Catalog']
    )
    def get(self, request, pk):
        try:
            category = self.get_object(pk)
            if not category:
                return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)
            serializer = ProductCategorySerializer(category, context={'request': request})
            logger.info(f"Retrieved category '{category.name}' (ID: {pk}) successfully.")
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.exception(f"Error retrieving category ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @swagger_auto_schema(
        operation_summary="Update Product Category by ID",
        request_body=ProductCategorySerializer,
        consumes=['multipart/form-data'],
        responses={200: ProductCategorySerializer, 400: "Invalid data", 404: "Category not found", 500: "Server Error"},
        tags=['Product Catalog']
    )
    def put(self, request, pk):
        try:
            category = self.get_object(pk)
            if not category:
                return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)
            serializer = ProductCategorySerializer(category, data=request.data, partial=False)       
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Category '{category.name}' (ID: {pk}) updated successfully.")
                return Response(ProductCategorySerializer(serializer.instance, context={'request': request}).data, status=status.HTTP_200_OK)
            logger.warning(f"Validation errors for updating category ID {pk}: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.exception(f"Error updating category ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @swagger_auto_schema(
        operation_summary="Partially update Product Category by ID",
        request_body=ProductCategorySerializer,
        consumes=['multipart/form-data'],
        responses={200: ProductCategorySerializer, 400: "Invalid data", 404: "Category not found", 500: "Server Error"},
        tags=['Product Catalog']
    )
    def patch(self, request, pk):
        try:
            category = self.get_object(pk)
            if not category:
                return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)

            serializer = ProductCategorySerializer(category, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Category '{category.name}' (ID: {pk}) partially updated successfully.")
                return Response(ProductCategorySerializer(serializer.instance, context={'request': request}).data, status=status.HTTP_200_OK)
            logger.warning(f"Validation errors for partial update category ID {pk}: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.exception(f"Error partially updating category ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @swagger_auto_schema(
        operation_summary="Delete Product Category by ID",
        responses={204: "Deleted successfully", 404: "Category not found", 500: "Server Error"},
        tags=['Product Catalog']
    )
    def delete(self, request, pk):
        try:
            category = self.get_object(pk)
            if not category:
                return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)

            category.delete()
            logger.info(f"Category '{category.name}' (ID: {pk}) deleted successfully.")
            return Response({"message":"Deleted Successfully."},status=status.HTTP_204_NO_CONTENT)

        except Exception as e:
            logger.exception(f"Error deleting category ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
