# ============================================================
# Standard Library Imports
# ============================================================
import logging

# ============================================================
# Django Imports
# ============================================================
from django.shortcuts import get_object_or_404

# ============================================================
# Third-Party Imports
# ============================================================
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from rest_framework.parsers import MultiPartParser, FormParser
from drf_yasg.utils import swagger_auto_schema

# ============================================================
# Local Application Imports
# ============================================================
from .models import ProductCategory, Brand, ProductModel
from .serializers import ProductCategorySerializer, ProductBrandSerializer, ProductModelSerializer
from .permissions import IsAdminOrGlobalManager, IsAdminOrGlobalManagerOrReadOnly

# ============================================================
# Logger Setup
# ============================================================
logger = logging.getLogger(__name__)


# ============================================================
# Product Category Create and List View
# ============================================================
class ProductCategoryCreateView(APIView):
    """
    List all Product Categories or Create a new Product Category.
    Slug is automatically generated by the model.
    """

    # In production, only Admin or Global Manager should create categories
    # For testing pupose permission_classes = [AllowAny] can be used.
    permission_classes = [IsAdminOrGlobalManager]    
    parser_classes = [MultiPartParser, FormParser]

    @swagger_auto_schema(
        operation_summary="List all Product Categories",
        responses={200: ProductCategorySerializer(many=True)},
        tags=["Product Catalog"]
    )
    def get(self, request):
        """GET: List all product categories (ordered by display_order, name)."""
        categories = ProductCategory.objects.all().order_by('display_order', 'name')
        serializer = ProductCategorySerializer(categories, many=True, context={'request': request})
        return Response(serializer.data, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        operation_summary="Create a new Product Category",
        operation_description="Creates a new Product Category with optional icon and image.",
        request_body=ProductCategorySerializer,
        consumes=['multipart/form-data'],  # Required for file uploads
        responses={
            201: ProductCategorySerializer,
            400: "Invalid Category or Category Already Exists",
            500: "Unexpected Server Error",
        },
        tags=["Product Catalog"]
    )
    def post(self, request):
        """POST: Create a new product category."""
        try:
            serializer = ProductCategorySerializer(data=request.data)
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Category '{serializer.validated_data.get('name')}' created successfully.")
                return Response(
                    ProductCategorySerializer(serializer.instance, context={'request': request}).data,
                    status=status.HTTP_201_CREATED
                )
            logger.warning(f"Category creation failed: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.exception("Unexpected error occurred while creating category.")
            return Response(
                {"detail": "An unexpected error occurred while creating the category."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# ============================================================
# Product Category Detail View (Retrieve, Update, Delete)
# ============================================================
class ProductCategoryDetailView(APIView):
    """
    Retrieve, Update, Partially Update, or Delete a Product Category by ID.
    """

    # In production, only Admin or Global Manager should modify or delete categories
    # For testing pupose permission_classes = [AllowAny] can be used.
    permission_classes = [IsAdminOrGlobalManager]  
    parser_classes = [MultiPartParser, FormParser] 

    def get_object(self, pk):
        """Helper: Fetch ProductCategory instance or return None."""
        try:
            return ProductCategory.objects.get(pk=pk)
        except ProductCategory.DoesNotExist:
            logger.warning(f"Category with ID {pk} not found.")
            return None

    # ---------- Retrieve ----------
    @swagger_auto_schema(
        operation_summary="Retrieve Product Category by ID",
        responses={200: ProductCategorySerializer, 404: "Category not found", 500: "Server Error"},
        tags=["Product Catalog"]
    )
    def get(self, request, pk):
        """GET: Retrieve category by ID."""
        try:
            category = self.get_object(pk)
            if not category:
                return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)
            serializer = ProductCategorySerializer(category, context={'request': request})
            logger.info(f"Retrieved category '{category.name}' (ID: {pk}).")
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.exception(f"Error retrieving category ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Update ----------
    @swagger_auto_schema(
        operation_summary="Update Product Category by ID",
        request_body=ProductCategorySerializer,
        consumes=['multipart/form-data'],
        responses={200: ProductCategorySerializer, 400: "Invalid data", 404: "Not Found", 500: "Server Error"},
        tags=["Product Catalog"]
    )
    def put(self, request, pk):
        """PUT: Fully update category by ID."""
        try:
            category = self.get_object(pk)
            if not category:
                return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)
            serializer = ProductCategorySerializer(category, data=request.data, partial=False)
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Category '{category.name}' (ID: {pk}) updated successfully.")
                return Response(ProductCategorySerializer(serializer.instance, context={'request': request}).data, status=status.HTTP_200_OK)
            logger.warning(f"Validation errors updating category ID {pk}: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.exception(f"Error updating category ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Partial Update ----------
    @swagger_auto_schema(
        operation_summary="Partially update Product Category by ID",
        request_body=ProductCategorySerializer,
        consumes=['multipart/form-data'],
        responses={200: ProductCategorySerializer, 400: "Invalid data", 404: "Not Found", 500: "Server Error"},
        tags=["Product Catalog"]
    )
    def patch(self, request, pk):
        """PATCH: Partially update category by ID."""
        try:
            category = self.get_object(pk)
            if not category:
                return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)
            serializer = ProductCategorySerializer(category, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Category '{category.name}' (ID: {pk}) partially updated.")
                return Response(ProductCategorySerializer(serializer.instance, context={'request': request}).data, status=status.HTTP_200_OK)
            logger.warning(f"Partial update validation failed for ID {pk}: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.exception(f"Error partially updating category ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Delete ----------
    @swagger_auto_schema(
        operation_summary="Delete Product Category by ID",
        responses={204: "Deleted successfully", 404: "Not Found", 500: "Server Error"},
        tags=["Product Catalog"]
    )
    def delete(self, request, pk):
        """DELETE: Remove category by ID."""
        try:
            category = self.get_object(pk)
            if not category:
                return Response({"detail": "Category not found."}, status=status.HTTP_404_NOT_FOUND)
            category.delete()
            logger.info(f"Category '{category.name}' (ID: {pk}) deleted successfully.")
            return Response({"message": "Deleted successfully."}, status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            logger.exception(f"Error deleting category ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


# ============================================================
# Product Brand Create and List View
# ============================================================
class ProductBrandCreateView(APIView):
    """
    List all Product Brands or Create a new Product Brand.
    Slug is automatically generated by the model.
    Only Admin or Global Manager can create; others can read.
    """

    # In production, only Admin or Global Manager should create brand and others can read.
    # For testing pupose permission_classes = [AllowAny] can be used.    
    permission_classes = [IsAdminOrGlobalManagerOrReadOnly]    
    parser_classes = [MultiPartParser, FormParser]

    @swagger_auto_schema(
        operation_summary="List all Product Brands",
        responses={200: ProductBrandSerializer(many=True)},
        tags=["Product Brands"]
    )
    def get(self, request):
        """GET: List all product brands (ordered by category, display_order, name)."""
        brands = Brand.objects.select_related('category').all().order_by('category', 'display_order', 'name')
        serializer = ProductBrandSerializer(brands, many=True, context={'request': request})
        return Response(serializer.data, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        operation_summary="Create a new Product Brand",
        operation_description="Creates a new Product Brand under a category with optional logo and banner images.",
        request_body=ProductBrandSerializer,
        consumes=['multipart/form-data'],  # Required for file uploads
        responses={
            201: ProductBrandSerializer,
            400: "Invalid Brand or Brand Already Exists in Category",
            500: "Unexpected Server Error",
        },
        tags=["Product Brands"]
    )
    def post(self, request):
        """POST: Create a new product brand."""
        try:
            serializer = ProductBrandSerializer(data=request.data, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Brand '{serializer.validated_data.get('name')}' created successfully.")
                return Response(
                    ProductBrandSerializer(serializer.instance, context={'request': request}).data,
                    status=status.HTTP_201_CREATED
                )
            logger.warning(f"Brand creation failed: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.exception("Unexpected error occurred while creating brand.")
            return Response(
                {"detail": "An unexpected error occurred while creating the brand."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
        

# ============================================================
# Product Brand Detail View (Retrieve, Update, Delete)
# ============================================================
class ProductBrandDetailView(APIView):
    """
    Retrieve, Update, Partially Update, or Delete a Product Brand by ID.
    """

    # In production, only Admin or Global Manager should creamodify or delete brand and others can read.
    # For testing pupose permission_classes = [AllowAny] can be used.
    permission_classes = [IsAdminOrGlobalManagerOrReadOnly]
    parser_classes = [MultiPartParser, FormParser]

    def get_object(self, pk):
        """Helper: Fetch Brand instance or return None."""
        try:
            return Brand.objects.get(pk=pk)
        except Brand.DoesNotExist:
            logger.warning(f"Brand with ID {pk} not found.")
            return None

    # ---------- Retrieve ----------
    @swagger_auto_schema(
        operation_summary="Retrieve Product Brand by ID",
        responses={200: ProductBrandSerializer, 404: "Brand not found", 500: "Server Error"},
        tags=["Product Brands"]
    )
    def get(self, request, pk):
        """GET: Retrieve brand by ID."""
        try:
            brand = self.get_object(pk)
            if not brand:
                return Response({"detail": "Brand not found."}, status=status.HTTP_404_NOT_FOUND)
            serializer = ProductBrandSerializer(brand, context={'request': request})
            logger.info(f"Retrieved brand '{brand.name}' (ID: {pk}).")
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            logger.exception(f"Error retrieving brand ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Update ----------
    @swagger_auto_schema(
        operation_summary="Update Product Brand by ID",
        request_body=ProductBrandSerializer,
        consumes=['multipart/form-data'],
        responses={200: ProductBrandSerializer, 400: "Invalid data", 404: "Not Found", 500: "Server Error"},
        tags=["Product Brands"]        
    )
    def put(self, request, pk):
        """PUT: Fully update brand by ID."""
        try:
            brand = self.get_object(pk)
            if not brand:
                return Response({"detail": "Brand not found."}, status=status.HTTP_404_NOT_FOUND)
            serializer = ProductBrandSerializer(brand, data=request.data, partial=False, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Brand '{brand.name}' (ID: {pk}) updated successfully.")
                return Response(ProductBrandSerializer(serializer.instance, context={'request': request}).data, status=status.HTTP_200_OK)
            logger.warning(f"Validation errors updating brand ID {pk}: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.exception(f"Error updating brand ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Partial Update ----------
    @swagger_auto_schema(
        operation_summary="Partially update Product Brand by ID",
        request_body=ProductBrandSerializer,
        consumes=['multipart/form-data'],
        responses={200: ProductBrandSerializer, 400: "Invalid data", 404: "Not Found", 500: "Server Error"},
        tags=["Product Brands"]
        
    )
    def patch(self, request, pk):
        """PATCH: Partially update brand by ID."""
        try:
            brand = self.get_object(pk)
            if not brand:
                return Response({"detail": "Brand not found."}, status=status.HTTP_404_NOT_FOUND)
            serializer = ProductBrandSerializer(brand, data=request.data, partial=True, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                logger.info(f"Brand '{brand.name}' (ID: {pk}) partially updated.")
                return Response(ProductBrandSerializer(serializer.instance, context={'request': request}).data, status=status.HTTP_200_OK)
            logger.warning(f"Partial update validation failed for brand ID {pk}: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.exception(f"Error partially updating brand ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Delete ----------
    @swagger_auto_schema(
        operation_summary="Delete Product Brand by ID",
        responses={204: "Deleted successfully", 404: "Not Found", 500: "Server Error"},
        tags=["Product Brands"]
        
    )
    def delete(self, request, pk):
        """DELETE: Remove brand by ID."""
        try:
            brand = self.get_object(pk)
            if not brand:
                return Response({"detail": "Brand not found."}, status=status.HTTP_404_NOT_FOUND)
            brand.delete()
            logger.info(f"Brand '{brand.name}' (ID: {pk}) deleted successfully.")
            return Response({"message": "Deleted successfully."}, status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            logger.exception(f"Error deleting brand ID {pk}.")
            return Response({"detail": "Unexpected error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


# ============================================================
# Product Model Create and List View
# ============================================================
class ProductModelListCreateView(APIView):
    """
    List all Product Models or create a new one.
    """
    permission_classes = [IsAdminOrGlobalManagerOrReadOnly]
    parser_classes = [MultiPartParser, FormParser]

    @swagger_auto_schema(
        operation_summary="List all Product Models",
        responses={200: ProductModelSerializer(many=True)},
        tags=["Product Models"]
    )
    def get(self, request):
        products = ProductModel.objects.all().order_by('-created_at')
        serializer = ProductModelSerializer(products, many=True, context={'request': request})
        return Response(serializer.data)

    @swagger_auto_schema(
        operation_summary="Create a new Product Model (Admin or Global Manager only)",
        request_body=ProductModelSerializer,
        responses={201: ProductModelSerializer, 400: "Validation Error"},
        tags=["Product Models"]
    )
    def post(self, request):
        serializer = ProductModelSerializer(data=request.data, context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# ============================================================
# Product Model Detail View (Retrieve, Update, Delete)
# ============================================================
class ProductModelDetailView(APIView):
    """
    API View to Retrieve, Update (full & partial), or Delete a Product Model by ID.
    Includes proper error handling with try-except and logging.
    """    
    # Permissions and parsers    
    permission_classes = [IsAdminOrGlobalManagerOrReadOnly]
    parser_classes = [MultiPartParser, FormParser]

    def get_object(self, pk):
        """
        Helper method to fetch a ProductModel by primary key.
        Returns None if the object does not exist, and logs a warning.
        """
        try:
            return ProductModel.objects.get(pk=pk)
        except ProductModel.DoesNotExist:
            logger.warning(f"ProductModel with ID {pk} not found")
            return None

    # ---------- Retrieve ----------
    @swagger_auto_schema(
        operation_summary="Retrieve Product Model by ID",
        responses={200: ProductModelSerializer, 404: "Not Found"},
        tags=["Product Models"]       
    )
    def get(self, request, pk):
        try:
            product = self.get_object(pk)
            if not product:
                return Response({"detail": "Product not found"}, status=status.HTTP_404_NOT_FOUND)
            
            serializer = ProductModelSerializer(product, context={'request': request})
            return Response(serializer.data, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Error retrieving ProductModel ID {pk}: {str(e)}")
            return Response({"detail": "Internal server error"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Full Update (PUT) ----------
    @swagger_auto_schema(
        operation_summary="Full update Product Model (Admin or Global Manager only)",
        request_body=ProductModelSerializer,
        responses={200: ProductModelSerializer, 400: "Validation Error", 404: "Not Found"},
        tags=["Product Models"]
    )
    def put(self, request, pk):
        try:
            product = self.get_object(pk)
            if not product:
                return Response({"detail": "Product not found"}, status=status.HTTP_404_NOT_FOUND)

            serializer = ProductModelSerializer(
                product,
                data=request.data,
                partial=False,  # All fields are required
                context={'request': request}
            )

            if serializer.is_valid():
                serializer.save()
                logger.info(f"ProductModel ID {pk} fully updated successfully")
                return Response(serializer.data, status=status.HTTP_200_OK)
            else:
                logger.warning(f"Validation error updating ProductModel ID {pk}: {serializer.errors}")
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"Error fully updating ProductModel ID {pk}: {str(e)}")
            return Response({"detail": "Internal server error"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Partial Update (PATCH) ----------
    @swagger_auto_schema(
        operation_summary="Partial update Product Model (Admin or Global Manager only)",
        request_body=ProductModelSerializer,
        responses={200: ProductModelSerializer, 400: "Validation Error", 404: "Not Found"},
        tags=["Product Models"]
    )
    def patch(self, request, pk):
        try:
            product = self.get_object(pk)
            if not product:
                return Response({"detail": "Product not found"}, status=status.HTTP_404_NOT_FOUND)

            serializer = ProductModelSerializer(
                product,
                data=request.data,
                partial=True,  # Only fields provided will be updated
                context={'request': request}
            )

            if serializer.is_valid():
                serializer.save()
                logger.info(f"ProductModel ID {pk} partially updated successfully")
                return Response(serializer.data, status=status.HTTP_200_OK)
            else:
                logger.warning(f"Validation error partially updating ProductModel ID {pk}: {serializer.errors}")
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"Error partially updating ProductModel ID {pk}: {str(e)}")
            return Response({"detail": "Internal server error"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # ---------- Delete ----------
    @swagger_auto_schema(
        operation_summary="Delete Product Model (Admin or Global Manager only)",
        responses={204: "Deleted", 403: "Forbidden", 404: "Not Found"},
        tags=["Product Models"]
    )
    def delete(self, request, pk):
        try:
            product = self.get_object(pk)
            if not product:
                return Response({"detail": "Product not found"}, status=status.HTTP_404_NOT_FOUND)

            product.delete()
            logger.info(f"ProductModel ID {pk} deleted successfully")
            return Response({"message":"Deleted Successfully"},status=status.HTTP_204_NO_CONTENT)

        except Exception as e:
            logger.error(f"Error deleting ProductModel ID {pk}: {str(e)}")
            return Response({"detail": "Internal server error"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
