# Generated by Django 5.1.4 on 2025-10-15 07:37

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name (e.g., Mobile Phones, Laptops, Tablets)', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly version of name', max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class or emoji for the category (e.g., ðŸ“±, ðŸ’», ðŸ“º)', max_length=100, null=True)),
                ('image', models.ImageField(blank=True, help_text='Category banner/image', null=True, upload_to='categories/')),
                ('description', models.TextField(blank=True, help_text='Category description for customers', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this category currently available?')),
                ('is_featured', models.BooleanField(default=False, help_text='Show in featured categories?')),
                ('display_order', models.IntegerField(default=0, help_text='Order in which category appears (lower = higher priority)')),
                ('meta_title', models.CharField(blank=True, help_text='SEO meta title', max_length=200, null=True)),
                ('meta_description', models.TextField(blank=True, help_text='SEO meta description', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'db_table': 'product_categories',
                'ordering': ['display_order', 'name'],
                'indexes': [models.Index(fields=['slug'], name='product_cat_slug_801f9e_idx'), models.Index(fields=['is_active'], name='product_cat_is_acti_f5a665_idx'), models.Index(fields=['display_order'], name='product_cat_display_be2083_idx')],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Brand name (e.g., Samsung, Apple, Dell, Sony)', max_length=100)),
                ('slug', models.SlugField(help_text='URL-friendly version of name', max_length=150)),
                ('logo', models.ImageField(blank=True, help_text='Brand logo image', null=True, upload_to='brands/logos/')),
                ('banner_image', models.ImageField(blank=True, help_text='Brand banner for brand page', null=True, upload_to='brands/banners/')),
                ('country_of_origin', models.CharField(blank=True, help_text='Country where brand originated', max_length=100, null=True)),
                ('website', models.URLField(blank=True, help_text='Official brand website', null=True)),
                ('description', models.TextField(blank=True, help_text='Brand description and history', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this brand currently available for financing?')),
                ('is_featured', models.BooleanField(default=False, help_text='Show this brand in featured listings?')),
                ('display_order', models.IntegerField(default=0, help_text='Order in which brand appears in listings (lower = higher priority)')),
                ('meta_title', models.CharField(blank=True, help_text='SEO meta title', max_length=200, null=True)),
                ('meta_description', models.TextField(blank=True, help_text='SEO meta description', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(help_text='Parent category this brand belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='brands', to='products.productcategory')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'db_table': 'brands',
                'ordering': ['category', 'display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ola_code', models.CharField(db_index=True, editable=False, help_text='Auto-generated unique code: OLA + 5 digits (e.g., OLA12345)', max_length=8, unique=True)),
                ('model_name', models.CharField(help_text='Product model name (e.g., Galaxy S23 Ultra, MacBook Pro 14, iPad Air)', max_length=200)),
                ('model_number', models.CharField(blank=True, help_text="Manufacturer's model number (e.g., SM-S918B, MNW83LL/A)", max_length=100, null=True)),
                ('release_year', models.IntegerField(blank=True, help_text='Year the model was released', null=True)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit (optional internal reference)', max_length=100, null=True, unique=True)),
                ('primary_image', models.ImageField(blank=True, help_text='Main product image (displayed in listings)', null=True, upload_to='products/primary/')),
                ('specifications', models.JSONField(default=dict, help_text='Product specifications as JSON. Structure by category:\n        {\n            "Display": {"Screen Size": "6.7 inches", "Resolution": "1440x3088"},\n            "Performance": {"RAM": "12GB", "Storage": "256GB", "Processor": "Snapdragon 8 Gen 2"},\n            "Camera": {"Rear": "200MP + 12MP + 10MP", "Front": "12MP"},\n            "Battery": {"Capacity": "5000mAh", "Fast Charging": "45W"},\n            "Connectivity": {"Network": "5G", "WiFi": "Wi-Fi 6E", "Bluetooth": "5.3"}\n        }')),
                ('ram', models.CharField(blank=True, help_text='RAM capacity (e.g., 8GB, 16GB, 32GB)', max_length=50, null=True)),
                ('storage', models.CharField(blank=True, help_text='Storage capacity (e.g., 256GB, 512GB, 1TB)', max_length=50, null=True)),
                ('processor', models.CharField(blank=True, help_text='Processor/chipset (e.g., M2 Pro, Core i7-13700H, Snapdragon 8 Gen 2)', max_length=200, null=True)),
                ('screen_size', models.CharField(blank=True, help_text='Screen/Display size (e.g., 6.7 inches, 14 inches, 55 inches)', max_length=50, null=True)),
                ('operating_system', models.CharField(blank=True, help_text='OS and version (e.g., Android 14, iOS 17, Windows 11, macOS Sonoma)', max_length=100, null=True)),
                ('color', models.CharField(blank=True, help_text='Product color/finish (e.g., Midnight Black, Space Gray, Silver)', max_length=100, null=True)),
                ('weight', models.CharField(blank=True, help_text='Weight (e.g., 168g, 1.5kg, 15kg)', max_length=50, null=True)),
                ('dimensions', models.CharField(blank=True, help_text='Dimensions (e.g., 146.7 x 71.5 x 7.6 mm, 31.26 x 21.83 x 1.55 cm)', max_length=100, null=True)),
                ('condition', models.CharField(choices=[('NEW', 'Brand New'), ('REFURBISHED', 'Refurbished'), ('LIKE_NEW', 'Like New'), ('USED', 'Used - Good Condition')], default='NEW', help_text='Product condition', max_length=20)),
                ('warranty_period', models.CharField(blank=True, help_text='Warranty period (e.g., 1 year manufacturer warranty, 2 years)', max_length=100, null=True)),
                ('warranty_provider', models.CharField(blank=True, help_text='Warranty provider (e.g., Manufacturer, Retailer, Extended)', max_length=200, null=True)),
                ('retail_price', models.DecimalField(decimal_places=2, help_text='Retail price (used for financing calculations)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('7.00'), help_text='Tax rate percentage (default 7%)', max_digits=5)),
                ('retail_price_with_tax', models.DecimalField(decimal_places=2, editable=False, help_text='Retail price including tax (auto-calculated)', max_digits=10)),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original MSRP (for showing discounts)', max_digits=10, null=True)),
                ('currency', models.CharField(default='USD', help_text='Currency code (e.g., USD, EUR, GBP)', max_length=3)),
                ('description', models.TextField(blank=True, help_text='Detailed product description for customers', null=True)),
                ('key_features', models.TextField(blank=True, help_text='Bullet points of key features (one per line)', null=True)),
                ('whats_in_box', models.TextField(blank=True, help_text='Box contents (e.g., Device, Charger, USB Cable, Documentation)', null=True)),
                ('specifications_pdf', models.FileField(blank=True, help_text='Detailed specifications PDF document', null=True, upload_to='products/specs/')),
                ('user_manual_pdf', models.FileField(blank=True, help_text='User manual PDF', null=True, upload_to='products/manuals/')),
                ('is_active', models.BooleanField(default=True, help_text='Is this product available for financing?')),
                ('is_featured', models.BooleanField(default=False, help_text='Show this product in featured listings?')),
                ('is_new_arrival', models.BooleanField(default=False, help_text='Mark as new arrival?')),
                ('is_bestseller', models.BooleanField(default=False, help_text='Mark as bestseller?')),
                ('display_order', models.IntegerField(default=0, help_text='Order in listings (lower = higher priority)')),
                ('slug', models.SlugField(help_text='URL-friendly version', max_length=250, unique=True)),
                ('meta_title', models.CharField(blank=True, help_text='SEO meta title', max_length=200, null=True)),
                ('meta_description', models.TextField(blank=True, help_text='SEO meta description', null=True)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags (e.g., flagship, gaming, budget, 5g, ultrabook)', max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(help_text='Product brand/manufacturer', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='products.brand')),
            ],
            options={
                'verbose_name': 'Product Model',
                'verbose_name_plural': 'Product Models',
                'db_table': 'product_models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='High-resolution product image', upload_to='products/gallery/')),
                ('image_type', models.CharField(choices=[('FRONT', 'Front View'), ('BACK', 'Back View'), ('SIDE', 'Side View'), ('TOP', 'Top View'), ('BOTTOM', 'Bottom View'), ('ANGLE', 'Angled View'), ('DISPLAY', 'Display/Screen On'), ('DETAIL', 'Detail Close-up'), ('PORTS', 'Ports and Buttons'), ('COLORS', 'Color Variants'), ('LIFESTYLE', 'Lifestyle Shot'), ('BOX', 'Box Contents'), ('COMPARISON', 'Size Comparison'), ('OTHER', 'Other')], default='OTHER', help_text='Type/angle of the image', max_length=20)),
                ('caption', models.CharField(blank=True, help_text='Image caption or description', max_length=300, null=True)),
                ('alt_text', models.CharField(blank=True, help_text='Alt text for accessibility and SEO', max_length=200, null=True)),
                ('display_order', models.IntegerField(default=0, help_text='Order in which image appears in gallery')),
                ('is_primary', models.BooleanField(default=False, help_text='Use as primary image if product.primary_image is not set?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.productmodel')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'db_table': 'product_images',
                'ordering': ['display_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(help_text='Customer name (can be anonymized)', max_length=200)),
                ('rating', models.IntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MinValueValidator(5)])),
                ('title', models.CharField(blank=True, help_text='Review title/headline', max_length=200, null=True)),
                ('review_text', models.TextField(help_text='Review content')),
                ('verified_purchase', models.BooleanField(default=False, help_text='Is this from a verified purchase?')),
                ('is_approved', models.BooleanField(default=False, help_text='Has this review been approved for display?')),
                ('helpful_count', models.IntegerField(default=0, help_text='Number of users who found this helpful')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.productmodel')),
            ],
            options={
                'verbose_name': 'Product Review',
                'verbose_name_plural': 'Product Reviews',
                'db_table': 'product_reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SpecificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Template name (e.g., 'Standard Smartphone Specs', 'Laptop Specifications')", max_length=200)),
                ('template_structure', models.JSONField(help_text='Specification structure template:\n        {\n            "Display": ["Screen Size", "Resolution", "Type", "Refresh Rate"],\n            "Performance": ["Processor", "RAM", "Storage", "GPU"],\n            "Camera": ["Rear Camera", "Front Camera", "Video Recording"],\n            "Battery": ["Capacity", "Fast Charging", "Wireless Charging"]\n        }')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spec_templates', to='products.productcategory')),
            ],
            options={
                'verbose_name': 'Specification Template',
                'verbose_name_plural': 'Specification Templates',
                'db_table': 'specification_templates',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['category', 'name'], name='brands_categor_8d01fa_idx'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['slug'], name='brands_slug_6a4b1c_idx'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['is_active'], name='brands_is_acti_101dba_idx'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['display_order'], name='brands_display_88dd5d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='brand',
            unique_together={('category', 'name')},
        ),
        migrations.AddIndex(
            model_name='productmodel',
            index=models.Index(fields=['ola_code'], name='product_mod_ola_cod_ca6116_idx'),
        ),
        migrations.AddIndex(
            model_name='productmodel',
            index=models.Index(fields=['brand', 'model_name'], name='product_mod_brand_i_6fc2c9_idx'),
        ),
        migrations.AddIndex(
            model_name='productmodel',
            index=models.Index(fields=['is_active', 'is_featured'], name='product_mod_is_acti_ae33ea_idx'),
        ),
        migrations.AddIndex(
            model_name='productmodel',
            index=models.Index(fields=['retail_price'], name='product_mod_retail__1bce42_idx'),
        ),
        migrations.AddIndex(
            model_name='productmodel',
            index=models.Index(fields=['display_order'], name='product_mod_display_e1e6ba_idx'),
        ),
        migrations.AddIndex(
            model_name='productmodel',
            index=models.Index(fields=['-created_at'], name='product_mod_created_e463cd_idx'),
        ),
        migrations.AddIndex(
            model_name='productmodel',
            index=models.Index(fields=['slug'], name='product_mod_slug_8d9b3b_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'display_order'], name='product_ima_product_d1c257_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['product', '-created_at'], name='product_rev_product_b958dd_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['is_approved'], name='product_rev_is_appr_dbd189_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['rating'], name='product_rev_rating_fb8943_idx'),
        ),
    ]
